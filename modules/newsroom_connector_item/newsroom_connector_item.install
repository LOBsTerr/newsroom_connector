<?php

/**
 * @file
 * Update hooks.
 */

use Drupal\Core\Config\ExtensionInstallStorage;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Database\Database;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Increase the size of text fields.
 */
function newsroom_connector_item_update_9001(&$sandbox) {

  if ($schema = Database::getConnection()->schema()) {
    $length = 500;
    $fields = [
      'field_newsroom_project_name',
      'field_newsroom_contact_info',
      'field_newsroom_contact_text',
      'field_newsroom_location',
      'field_newsroom_organiser',
      'field_newsroom_pr_coordinator',
      'field_newsroom_speaker',
      'field_newsroom_venue',
    ];
    $table_prefixes = [
      'node',
      'node_revision',
    ];
    $config_factory = \Drupal::configFactory();
    foreach ($fields as $field_name) {
      foreach ($table_prefixes as $table_prefix) {
        $schema->changeField(
          "{$table_prefix}__{$field_name}",
          "{$field_name}_value",
          "{$field_name}_value",
          [
            'type' => 'varchar',
            'length' => $length,
            'default' => '',
          ]
        );
      }

      $config = $config_factory->getEditable('field.storage.node.' . $field_name);
      $settings = $config->get('settings');
      $settings['max_length'] = $length;
      $config->set('settings', $settings);
      $config->save();
    }
  }
}

/**
 * Add author field.
 */
function newsroom_connector_item_update_9002(&$sandbox) {
  $field_name = 'field_newsroom_author';
  $entity_type = 'node';
  $bundle = 'newsroom_item';

  $entity_type_manager = \Drupal::entityTypeManager();
  $install_storage = new ExtensionInstallStorage(
    \Drupal::service('config.storage'),
    InstallStorage::CONFIG_INSTALL_DIRECTORY,
    InstallStorage::DEFAULT_COLLECTION,
    TRUE,
    NULL
  );
  $field_storage_config = $install_storage->read("field.storage.{$entity_type}.{$field_name}");

  FieldStorageConfig::create($field_storage_config)->save();

  $field_config = $install_storage->read("field.field.{$entity_type}.{$bundle}.{$field_name}");
  FieldConfig::create($field_config)->save();

  $display_form = $entity_type_manager
    ->getStorage('entity_form_display')
    ->load("{$entity_type}.{$bundle}.default")
    ->setComponent($field_name, [
      'type'   => 'string_textfield',
      'weight' => 32,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'region' => 'content',
    ]);
  $display_form->save();

  $display_view = $entity_type_manager
    ->getStorage('entity_view_display')
    ->load("{$entity_type}.{$bundle}.default")
    ->setComponent($field_name, [
      'type'   => 'string',
      'weight' => 126,
      'settings' => [
        'link_to_entity' => false,
      ],
      'region' => 'content',
    ]);

  $display_view->save();
}
