<?php

/**
 * @file
 * Provides newsroom_connector_item functionality.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\migrate\MigrateMessage;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\migrate_tools\MigrateExecutable;
use Drupal\newsroom_connector_item\Plugin\newsroom\NewsroomItemNewsroomProcessor;

/**
 * Implements hook_migrate_prepare_row().
 */
function newsroom_connector_item_migrate_prepare_row(
  Row $row,
  MigrateSourceInterface $source,
  MigrationInterface $migration
) {
  // Validate URLs and set values to NULL if the URL is invalid.
  $migration_id = $migration->id();
  if (strpos($migration_id, 'newsroom_item_translations') !== FALSE || $migration_id == 'newsroom_item') {
    _newsroom_connector_validate_urls($row);
    $row->setSourceProperty('is_machine_translated', $row->getSourceProperty('is_machine_translated') == 'True');
  }

  if (strpos($migration_id, 'newsroom_item_document_translations') !== FALSE || $migration_id == 'newsroom_item_document') {
    $row->setSourceProperty('is_machine_translated', $row->getSourceProperty('is_machine_translated') == 'True');
  }

  if ($migration_id == 'newsroom_item') {
    // We set empty string for fields, which don't have values. So, they will be reset.
    $source_fields = $row->getSource()['fields'];
    foreach ($source_fields as $source_field) {
      $source_field_name = $source_field['name'];
      $source_field_value = $row->getSourceProperty($source_field_name);
      if (empty($source_field_value)) {
        $row->setSourceProperty($source_field_name, '');
      }
    }

    // Convert the date to timestamp, to get a correct date
    // we need to clean UTC.
    $published_date = strtotime(str_replace('UTC', '', $row->getSourceProperty('published_date')));
    $row->setSourceProperty('published_date', $published_date);

    $start_date = $row->getSourceProperty('start_date');
    $end_date = $row->getSourceProperty('end_date');
    if (!empty($start_date) && empty($end_date)) {
      $row->setSourceProperty('end_date', $start_date);
    }

    $related_documents_titles = $row->getSourceProperty('related_documents_title');
    $related_documents_urls = $row->getSourceProperty('related_documents_url');

    $data = [];
    if (!empty($related_documents_urls)) {
      if (is_array($related_documents_urls)) {
        foreach ($related_documents_urls as $key => $item) {
          $data[$key]['url'] = $related_documents_urls[$key];
          $data[$key]['title'] = $related_documents_titles[$key];
        }
      }
      else {
        $data[0]['url'] = $related_documents_urls;
        $data[0]['title'] = $related_documents_titles;
      }
    }
    $row->setSourceProperty('documents', $data);
  }

  // Set title as alt text if it is empty.
  if (strpos($migration_id, 'newsroom_item_image_media_translations') !== FALSE || $migration_id == 'newsroom_item_image_media') {
    $newsroom_item_title = $row->getSourceProperty('item_name');
    $image_alt = $row->getSourceProperty('image_alt');

    if (empty($image_alt)) {
      $row->setSourceProperty('image_alt', $newsroom_item_title);
    }
  }
}

/**
 * Validate urls.
 *
 * @param \Drupal\migrate\Row $row
 *   Migration row.
 */
function _newsroom_connector_validate_urls(Row &$row) {
  $newsroom_id = $row->getSourceProperty('item_id');
  $logger = \Drupal::logger('newsroom');

  $see_also_url = $row->getSourceProperty('see_also_url');
  if (!empty($see_also_url) && !filter_var($see_also_url, FILTER_VALIDATE_URL)) {
    $row->setSourceProperty('see_also_url', NULL);
    $row->setSourceProperty('see_also_title', NULL);
    $logger->error(t('URL for field "See also" is not correct for newsroom id - @id', ['@id' => $newsroom_id]));
  }

  $main_url = $row->getSourceProperty('main_link');
  if (!empty($main_url) && !filter_var($main_url, FILTER_VALIDATE_URL)) {
    $row->setSourceProperty('main_link', NULL);
    $logger->error(t('URL for field "Main url" is not correct for newsroom id - @id', ['@id' => $newsroom_id]));
  }

  $project_website_url = $row->getSourceProperty('project_website_url');
  if (!empty($project_website_url) && !filter_var($project_website_url, FILTER_VALIDATE_URL)) {
    $row->setSourceProperty('project_website_url', NULL);
    $row->setSourceProperty('project_website_title', NULL);
    $logger->error(t('URL for field "Project website" is not correct for newsroom id - @id', ['@id' => $newsroom_id]));
  }

  $registration_link_url = $row->getSourceProperty('registration_link_url');
  if (!empty($registration_link_url) && !filter_var($registration_link_url, FILTER_VALIDATE_URL)) {
    $row->setSourceProperty('registration_link_url', NULL);
    $logger->error(t('URL for field "Registration link" is not correct for newsroom id - @id', ['@id' => $newsroom_id]));
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function newsroom_connector_item_entity_extra_field_info() {
  $extra = [];

  $extra['node']['newsroom_item']['display']['newsroom_action_buttons'] = [
    'label' => t('Action buttons'),
    'description' => t('Displays buttons to edit or to reimport newsroom item.'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function newsroom_connector_item_node_view(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display,
  $view_mode
) {

  if ($entity->bundle() == 'newsroom_item' && $display->getComponent('newsroom_action_buttons')) {
    $current_user = \Drupal::currentUser();
    if ($current_user->hasPermission('import newsroom content')) {
      $newsroom_id = $entity->field_newsroom_id->value;
      if (!empty($newsroom_id)) {
        $universe_manager = \Drupal::service('newsroom_connector.universe_manager');
        // Newsroom action buttons.
        $items = [
          Link::fromTextAndUrl('Edit', $universe_manager->getItemEditUrl($newsroom_id))->toRenderable(),
          Link::fromTextAndUrl('Import', URL::fromRoute('newsroom_connector.import', [
            'type' => 'item',
            'newsroom_id' => $newsroom_id,
          ]))->toRenderable(),
        ];
        $build['newsroom_action_buttons'] = [
          '#theme' => 'item_list',
          '#items' => $items,
        ];
      }
    }
  }

}

/**
 * Implements hook_entity_delete().
 */
function newsroom_connector_item_node_delete(EntityInterface $entity) {
  if ($entity->bundle() == 'newsroom_item') {

    // Clean up migrations.
    $migration_manager = \Drupal::service('newsroom_connector.migration_manager');
    $migration_manager->cleanUpMigrations(NewsroomItemNewsroomProcessor::MIGRATION_ITEM, $entity);

    // Remove media.
    if ($media = $entity->field_newsroom_image->entity) {

      // Clean up migrations.
      $migration_manager->cleanUpMigrations(NewsroomItemNewsroomProcessor::MIGRATION_ITEM_IMAGE_MEDIA, $media);
      if ($file = $media->field_media_image_newsroom->entity) {
        $migration_manager->cleanUpMigrations(NewsroomItemNewsroomProcessor::MIGRATION_ITEM_IMAGE, $file);
      }

      $media->delete();
    }
  }
}

/**
 * Implements hook_cron().
 */
function newsroom_connector_item_cron() {

  // Run importers for deleted and unpublished items.
  $migrations = [
    'deleted_newsroom_items' => 'feed/deleted',
    'unpublished_newsroom_items' => 'feed/unpublished',
  ];

  $base_url = \Drupal::service('newsroom_connector.universe_manager')->getBaseUrl();
  $newsroom_migration_manager = \Drupal::service('newsroom_connector.migration_manager');
  foreach ($migrations as $migration_id => $script) {
    $migration = $newsroom_migration_manager->getMigration($migration_id);
    if (!empty($migration)) {
      $status = $migration->getStatus();
      if ($status !== MigrationInterface::STATUS_IDLE) {
        $migration->setStatus(MigrationInterface::STATUS_IDLE);
      }
      $source = $migration->getSourceConfiguration();
      $source['urls'] = $base_url . $script;
      $migration->set('source', $source);
      $migration->getIdMap()->prepareUpdate();
      $executable = new MigrateExecutable($migration, new MigrateMessage());
      $executable->import();
    }
  }
}
